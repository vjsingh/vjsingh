// Generated by CoffeeScript 1.3.3
(function() {

  define(['app'], function(app) {
    var AppView;
    AppView = Backbone.View.extend({
      initialize: function(options) {
        this._addedEventBindings = [];
        if (this.additionalInitialize) {
          return this.additionalInitialize(options);
        }
      },
      /*
           * For Garbage collection
           * Format is [ [obj, event, cb], [this.model, 'change', this.render]]
           * 
           * Defined in the constructor since otherwise the array is static 
           * across all instances.
      */

      _addedEventBindings: [],
      /*
           * Abstraction for adding events on objects that aren't the dom
           * Currently, lets us garbage collect on this.destroy()
      */

      doBind: function(event, cb, context, obj) {
        if (!obj) {
          obj = app.Mediator;
        }
        obj.on(event, cb, context);
        return this._addedEventBindings.push([obj, event, cb]);
      },
      /*
           * Removes all bindings from or on this view
      */

      unbindFromAll: function() {
        _.each(this._addedEventBindings, function(eventArr) {
          var cb, event, obj;
          obj = eventArr[0];
          event = eventArr[1];
          cb = eventArr[2];
          return obj.off(event, cb);
        });
        return this._addedEventBindings = [];
      },
      /*
           * Override in child views for individual garbage collecting
      */

      cleanup: function() {},
      /*
           * Entirely gets rid of this view, so JS will garbage collect hopefully
           * Removes from the DOM with this.remove()
           * Unbinds all backbone events with this.unbind()
           * Unbinds all other bindings (app.mediator) with this.unbindFromAll()
      */

      destroy: function() {
        this.remove();
        this.unbind();
        this.unbindFromAll();
        return this.cleanup();
      },
      render: function() {
        this.renderTemplate();
        if (this.postRender) {
          return this.postRender();
        }
        return this;
      },
      renderTemplate: function(context, templateName) {
        if (!context) {
          context = this.context();
        }
        if (!templateName) {
          templateName = this.templateName;
        }
        this.$el.html(app.getTemplate(this.templateName, context));
        return this;
      },
      context: function() {
        if (this.model) {
          return this.model.attributes;
        } else if (this.options) {
          return this.options;
        } else {
          return {};
        }
      },
      slideUp: function(cb) {
        $('body').css({
          'margin-top': '0px',
          'margin-bottom': '0px'
        });
        return $('#animation-wrapper').css({
          'margin-top': '150%'
        }).transition({
          marginTop: '0'
        }, 250, 'linear', cb);
      },
      slideDown: function(cb) {
        return $('#animation-wrapper').css({
          'margin-top': '0'
        }).transition({
          marginTop: '175%'
        }, 250, 'linear', cb);
      },
      slideLeft: function(cb) {
        return $('#main-page-wrapper').css({
          'left': '20%'
        }).transition({
          left: '0%'
        }, 150, 'linear', cb);
      },
      slideRight: function(cb) {
        return $('#main-page-wrapper').css({
          'left': '0%'
        }).transition({
          left: '100%'
        }, 250, 'linear', cb);
      }
    });
    return AppView;
  });

}).call(this);
