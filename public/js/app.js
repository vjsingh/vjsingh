// Generated by CoffeeScript 1.3.3

/*
define((require) ->
  $           = require('jquery')
  _           = require('underscore')
  Backbone    = require('backbone')
  dummy       = require('handlebars')
  dummy       = require('plugins/backbone.layoutmanager')
  dummy       = require('templates')
  asdf
*/


(function() {

  define(['jquery', 'underscore', 'backbone', 'handlebars', 'transit'], function($, _, Backbone, views) {
    var Mediator, app;
    Mediator = {};
    _.extend(Mediator, Backbone.Events);
    app = {
      root: "/",
      views: {},
      models: {},
      collections: {},
      Templates: window.Templating,
      getTemplate: function(templateName, context) {
        return app.Templates.tpl(templateName + '.us', context);
      },
      Mediator: Mediator,
      module: function(additionalProps) {
        return _.extend({
          Views: {},
          additionalProps: additionalProps
        });
      },
      AppView: {
        setView: function(viewName, elSelector, view, doPrepend) {
          if (this[viewName] && this[viewName] === view) {
            this[viewName].render();
            this[viewName].$el.show();
            return this[viewName];
          }
          if (doPrepend) {
            $(elSelector).prepend(view.el);
          } else {
            $(elSelector).append(view.el);
          }
          view.render();
          if (this[viewName]) {
            this[viewName].destroy();
          }
          return this[viewName] = view;
        },
        destroyView: function(viewName) {
          if (this[viewName]) {
            this[viewName].destroy();
            return this[viewName] = null;
          }
        },
        hideView: function(viewName) {
          if (this[viewName]) {
            return this[viewName].$el.hide();
          }
        },
        setOverlay: function(overlay) {
          return app.AppView.setView('overlay', 'body', overlay, true);
        },
        setMainView: function(view) {
          /*
                      * To adapt for animations
                      * $("#main").empty().html(view.el);
                      * The corresponding div is #[the template name of the view]
                      * Can specify something different with view.containerName
          */

          containerName;

          var containerName;
          if (view.containerName) {
            containerName = view.containerName;
          } else if (view.templateName) {
            containerName = view.templateName;
          }
          console.log('Error in app.js: no templateName or containerName specified');
          app.AppView.setView('mainView', '#main-page-wrapper', view);
          view.$el.attr('id', containerName);
          $('#animation-wrapper').css({
            'margin-top': '0'
          });
          $('#animation-wrapper').css({
            'left': '0px'
          });
          $('#main-page-wrapper').css({
            'left': '0px'
          });
          $('#main-page-wrapper').append(view.el);
          view.$el.attr('id', containerName);
          if (view.animateIn !== void 0) {
            view.animateIn();
          }
          if (view.templateName === 'transaction' || view.templateName === 'notifications' || view.templateName === 'bankAccounts' || view.templateName === 'pendingTransactions') {
            $('#header').css({
              'position': 'relative'
            });
          } else {
            $('body').removeAttr('style');
            $('#header').removeAttr('style');
          }
          return view;
        },
        setHeader: function(header) {
          return app.AppView.setView('header', '#header', header);
          /*
                    // Sets a view one layer "in" from its parent with a back button
                        setSubView: function(view, parent) {
                            app.AppView.setView('mainView', '#main-page-wrapper', view);
                            if (view.dont_show_tabs === undefined) {
                                // Show tabs, but don't show anything highlighted
                                app.AppView.setTabs('');
                                $('#header').removeClass('rounded-bottoms');
                            } else {
                                // Clear tabs
                                this.tabs = null;
                                $('#tabs').html("");
                                $('#tabs').hide();
          
                                if ($('body').hasClass('static-top-tabs')) {
                                    // Round header corners
                                    $('#header').addClass('rounded-bottoms');
                                }
                            }
                            // TODO: Keep track of parent, stack
                            // TODO: Standard animateIn
                            view.slideLeft();
                        },
          
          
                    showModal: function(options) {
                        var modal = new app.views.ModalView(options);
                        $('body').append(modal.$el);
                        modal.render();
                        modal.animateIn();
                        modal.setFocus();
                        return modal;
                    },
          */

        },
        goBack: function() {
          return window.history.back();
        }
      }
    };
    less.env = 'development';
    less.watch();
    return app;
  });

  /* If we ever want to go back to fetching templates asynchronously
  fetch: (path) ->
    path = path + ".html"
    unless JST[path]
      $.ajax({
        url: app.root + path
        async: false
      }).then (contents) ->
        JST[path] = _.template(contents)
    return JST[path]
  */


}).call(this);
